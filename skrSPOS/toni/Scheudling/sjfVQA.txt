This C++ code implements the **Shortest Job First (SJF)** scheduling algorithm, which is a **non-preemptive** CPU scheduling algorithm. It selects the process with the smallest burst time (execution time) from the ready queue for execution, thereby minimizing the average waiting time.

Here is a detailed breakdown of the program and its functionality:

### Key Functions and Their Roles

1. **`findCompletionTime` Function:**
   - This function calculates the **completion time (CT)** for each process based on its arrival time and burst time.
   - It first sorts the processes based on their arrival time.
   - Then, it assigns the start time and completion time for each process in sequence, considering the completion time of the previous process to determine the start time of the next process.

2. **`findTurnAroundTime` Function:**
   - This function calculates the **turnaround time (TAT)** for each process.
   - Turnaround time is calculated as:
     ```
     TAT = Completion Time (CT) - Arrival Time (AT)
     ```

3. **`findWaitingTime` Function:**
   - This function calculates the **waiting time (WT)** for each process.
   - Waiting time is calculated as:
     ```
     WT = Turnaround Time (TAT) - Burst Time (BT)
     ```

4. **`printGanttChart` Function:**
   - This function prints the **Gantt Chart**, which visually represents the scheduling of processes on the CPU over time.
   - The Gantt chart is generated by sorting the processes by their start time.
   - It prints the process IDs in the top row and the start and end times in the bottom row, displaying when each process starts and finishes.

5. **`findAvgTime` Function:**
   - This function combines all of the above functions to calculate the **average waiting time** and **average turnaround time** for all processes.
   - It calculates the total waiting and turnaround times, prints the individual details for each process, and computes the averages.
   - Finally, it prints the Gantt chart.

### Main Function
- The program begins by prompting the user to input the number of processes and their corresponding arrival and burst times.
- Then, it calls the `findAvgTime` function, which calculates and displays the **completion time**, **turnaround time**, **waiting time**, and the **Gantt chart** for the given processes.

### Example Walkthrough:
Letâ€™s walk through an example where we have **3 processes** with the following arrival and burst times:

- **Process 1**: Arrival Time = 0, Burst Time = 5
- **Process 2**: Arrival Time = 1, Burst Time = 3
- **Process 3**: Arrival Time = 2, Burst Time = 2

### Output:

Assume the program's output might look something like this:

```
Enter the number of processes: 3
Enter the Arrival Time and Burst Time of process 1: 0 5
Enter the Arrival Time and Burst Time of process 2: 1 3
Enter the Arrival Time and Burst Time of process 3: 2 2

Process No.	Arrival Time	Burst Time	Start Time	Completion Time	Wait Time	Turnaround Time
P1		0		5		0		5		0		5
P2		1		3		5		8		2		7
P3		2		2		8		10		6		8

Average Waiting Time: 2.67
Average Turnaround Time: 6.67

Gantt Chart:
-------------------------------------------------
|  P1  |  P2  |  P3  |
-------------------------------------------------
0      5      8      10
```

### Detailed Explanation of the Example:
- **Process 1** arrives at time 0 and has a burst time of 5. Since it's the first process, it starts immediately at time 0 and finishes at time 5.
- **Process 2** arrives at time 1 and has a burst time of 3. It starts after Process 1 completes (at time 5) and finishes at time 8.
- **Process 3** arrives at time 2 and has a burst time of 2. It starts after Process 2 completes (at time 8) and finishes at time 10.

### Key Points:
1. **Shortest Job First (SJF)**:
   - SJF minimizes the average waiting time by always selecting the process with the shortest burst time next. 
   - It is important to note that this version of SJF is **non-preemptive**, meaning that once a process starts, it runs to completion before the next process is scheduled.

2. **Average Waiting Time**:
   - The **average waiting time** is calculated by summing up the individual waiting times for all processes and dividing by the total number of processes.

3. **Average Turnaround Time**:
   - The **average turnaround time** is the average time a process takes from arrival to completion.

4. **Gantt Chart**:
   - The **Gantt Chart** visually represents the scheduling of the processes, showing when each process starts and finishes.

### Time Complexity:
- Sorting the processes based on their arrival times takes `O(n log n)`.
- The calculation of start time, completion time, waiting time, and turnaround time all take `O(n)` time.
- Overall, the time complexity of the algorithm is **O(n log n)** due to the sorting step, which is the dominant operation.

This program is a simple and effective implementation of the **Shortest Job First (SJF)** scheduling algorithm.
