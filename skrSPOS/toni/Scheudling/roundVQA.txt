This C++ code implements the **Round Robin (RR) scheduling algorithm** with a given **time quantum (tq)**. The goal of the program is to simulate CPU process scheduling, where each process gets a fixed amount of time (the time quantum) to execute. If a process doesnâ€™t finish within its allotted time, it is preempted and placed back into the ready queue to get another chance to execute later. The program computes various metrics such as the **turnaround time**, **waiting time**, and the **average waiting time** and **average turnaround time** for the processes.

### Key Components and Explanation

1. **Variables and Data Structures:**
   - **arrivalTime[]**: Stores the arrival times of each process.
   - **burstTime[]**: Stores the burst times (execution times) of each process.
   - **remainingTime[]**: Tracks the remaining burst time for each process. This decreases as the process executes.
   - **startTime[]**: The start time of each process, initialized to -1, which indicates the process hasn't started yet.
   - **completionTime[]**: The time at which each process finishes executing.
   - **turnaroundTime[]**: The total time taken for a process to complete from arrival to completion, calculated as `completionTime[i] - arrivalTime[i]`.
   - **waitingTime[]**: The total waiting time of a process before it starts execution, calculated as `turnaroundTime[i] - burstTime[i]`.
   - **isStarted[]**: A boolean array to track if a process has already started executing.
   - **readyQueue**: A deque (double-ended queue) used to hold processes that are ready to execute. It allows easy removal from the front and addition to the back, which is necessary for the round-robin scheduling.

2. **Input:**
   - The program asks for the **time quantum (tq)**, the **number of processes (n)**, and the **arrival time** and **burst time** for each process.

3. **Processing Logic:**
   - **Initialization**: The processes that arrive at time 0 are added to the `readyQueue`.
   
   - **Main Loop** (`while (remain > 0)`): This loop continues to execute until all processes are completed.
     - **Empty Ready Queue Handling**: If the `readyQueue` is empty, the CPU "waits" (incrementing the `time` variable) until a new process arrives. The program checks for newly arrived processes at each time unit and adds them to the queue.
   
     - **Process Execution**: The process at the front of the `readyQueue` is executed. The process is either fully completed or given another chance to run based on the time quantum:
       - If the remaining burst time of the process is less than or equal to the time quantum (`tq`), it finishes execution, and its `completionTime`, `turnaroundTime`, and `waitingTime` are calculated.
       - If the remaining burst time is greater than the time quantum, the process executes for `tq` time units, and the remaining burst time is reduced. It is then placed back into the queue to be scheduled again.

   - **Output**: After all processes are completed, the program prints the following information for each process:
     - Process ID, Arrival Time, Burst Time, Start Time, Completion Time, Turnaround Time, Waiting Time.
   - The program then calculates and prints the **average waiting time** and **average turnaround time** for all processes.

### Example Walkthrough:

Consider the following example with 3 processes:

- **Process 1**: Arrival Time = 0, Burst Time = 5
- **Process 2**: Arrival Time = 1, Burst Time = 3
- **Process 3**: Arrival Time = 2, Burst Time = 2

#### Step-by-Step Execution:
1. At time `t = 0`, Process 1 is the only process in the ready queue and is executed for the entire time quantum (let's assume the time quantum is 2).
   - Remaining burst time for Process 1: 3 (5 - 2 = 3)
   - The process is added back to the queue to continue at a later time.

2. At time `t = 2`, Process 2 arrives and is added to the ready queue.
   - Process 1 is now executed for the remaining 1 time unit (from its remaining 3 burst time).
   - Process 2 will be executed for the full quantum if needed.

3. The system continues in this round-robin fashion until all processes complete, tracking their times, and calculating the average metrics.

### Average Metrics:
Once all processes complete, the program computes the following averages:
- **Average Waiting Time**: The average time a process spends in the ready queue.
- **Average Turnaround Time**: The average total time taken from the arrival of the process until its completion.

### Example Output:
```
Enter the time quantum: 2
Enter the number of processes: 3
Enter the arrival time and burst time of the processes:
Process 1: 0 5
Process 2: 1 3
Process 3: 2 2

Process	Arrival Time	Burst Time	Start Time	Completion Time	Turnaround Time	Waiting Time
P1		0		5		0		7		7		2
P2		1		3		2		6		5		2
P3		2		2		5		7		5		3

Average Waiting Time: 2.33
Average Turnaround Time: 5.00
```

### Key Points:
- **Time Quantum (tq)** controls how long each process gets to execute before being preempted.
- **Round Robin** ensures that each process gets a fair share of CPU time, with each process getting executed in a cyclic manner.
- The program calculates **waiting time** and **turnaround time** efficiently for each process, and computes their averages.

This implementation is ideal for environments where processes need to share CPU time fairly, such as operating systems and scheduling algorithms.
