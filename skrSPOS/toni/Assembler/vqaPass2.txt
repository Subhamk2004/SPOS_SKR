I'll provide the theory, explanation, and viva questions for this Pass 2 Assembler implementation.

Theory:
Pass 2 of an assembler is responsible for:
1. Converting intermediate code into machine code
2. Using symbol table and literal table from Pass 1
3. Resolving all references (symbols and literals)
4. Generating final object code
5. Error handling and reporting

Key Components:
1. Symbol Table: Used for symbol address resolution
2. Literal Table: Used for literal address resolution
3. Intermediate Code: Input from Pass 1
4. Machine Code Generation: Final output

Explanation:
The code processes the intermediate code generated by Pass 1 and:
1. Reads symbol and literal tables into memory
2. Processes each line of intermediate code
3. Converts operation codes to machine format
4. Resolves addresses for symbols and literals
5. Generates final machine code in proper format

Viva Questions and Answers:

Q1: What is the role of Pass 2 in assembly language processing?
A1: Pass 2:
- Reads intermediate code from Pass 1
- Uses symbol and literal tables
- Resolves addresses for symbols and literals
- Generates final machine code
- Handles any remaining assembly directives
- Produces the final object program

Q2: Explain the format of machine code generated by this implementation.
A2: The machine code format is:
- Opcode (2 digits)
- Register code (2 digits)
- Address (3 digits)
- Example: "04 01 056" means:
  - 04: Operation code
  - 01: Register number
  - 056: Memory address

Q3: How does the code handle different instruction types?
A3: The code handles:
- IS (Imperative Statements) instructions with proper opcode and operands
- DL (Declarative Statements) by generating appropriate machine code
- AD (Assembler Directives) by skipping them (writes blank line)
- Special handling for STOP instruction (IS,00)

Q4: Explain the readtables() method and its importance.
A4: readtables():
- Reads SYMTAB.txt and LITTAB.txt files
- Populates SYMTAB and LITTAB ArrayLists
- Converts string data to appropriate formats
- Essential for address resolution
- Prepares tables for machine code generation

Q5: What is the significance of format specifiers used in the code?
A5: Format specifiers:
- String.format("%02d", opcode): Ensures 2-digit opcode
- String.format("%03d", address): Ensures 3-digit address
- Maintains consistent machine code format
- Handles padding with zeros
- Makes output readable and standard

Q6: How does the code handle different addressing modes?
A6: The code handles:
- Direct addressing through symbol table references
- Literal addressing through literal table references
- Register addressing through register codes
- Different instruction formats based on operation type

Q7: What error handling mechanisms are implemented in this code?
A7: Error handling includes:
- Try-catch blocks for file operations
- Error messages for file reading issues
- Validation of intermediate code format
- Proper closure of file resources
- Error reporting through System.out

Q8: How does the code process register operations?
A8: Register operations are processed by:
- Replacing (RG,01) with 1, (RG,02) with 2, etc.
- Including register numbers in machine code
- Handling different register-based instruction formats
- Validating register codes

Q9: What is the significance of different instruction lengths in the code?
A9: Instruction lengths:
- Length 1: Simple instructions without operands
- Length 2: Instructions with single operand
- Length 3: Instructions with multiple operands
- Each length requires different processing logic

Q10: How does the code maintain consistency in machine code generation?
A10: Consistency is maintained through:
- Standard formatting for opcodes and addresses
- Consistent handling of symbols and literals
- Proper spacing in output
- Standardized line formats
- Proper file handling for input and output

These questions and answers cover the main aspects of Pass 2 implementation and demonstrate understanding of the assembly process's second phase. The implementation shows how intermediate code is converted to machine code while resolving all references and maintaining proper formatting.
